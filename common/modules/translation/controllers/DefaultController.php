<?phpnamespace common\modules\translation\controllers;use Yii;use soft\web\SoftController;use common\modules\translation\models\Message;use soft\helpers\LatinCyrillConvertor;use common\modules\translation\models\SourceMessage;use common\modules\translation\models\SourceMessageSearch;use yii\filters\AccessControl;use yii\web\NotFoundHttpException;use common\modules\translation\models\sync\Sync;/** * DefaultController implements the CRUD actions for SourceMessage model. */class DefaultController extends SoftController{    public function behaviors()    {        return [            'access' => [                'class' => AccessControl::className(),                'rules' => [                    [                        'allow' => true,                        'roles' => ['admin', 'system-user'],                    ],                ],            ],        ];    }    /**     * Lists all SourceMessage models.     * @return mixed     */    public function actionIndex()    {        $searchModel = new SourceMessageSearch();        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);        return $this->render('index', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }    /**     * Creates a new SourceMessage model.     * If creation is successful, the browser will be redirected to the 'view' page.     * @return mixed     * @throws \Exception     */    public function actionCreate()    {        $model = new SourceMessage([            'category' => 'app',        ]);        return $this->ajaxCrud($model)->createAction();    }    /**     * @param int $id     * @return array|mixed|string     * @throws NotFoundHttpException     */    public function actionUpdate($id)    {        $model = $this->findModel($id);        return $this->ajaxCrud($model)->updateAction();    }    public function actionView($id)    {        $model = $this->findModel($id);        return $this->ajaxCrud($model)->viewAction();    }    public function actionDelete($id)    {        $model = $this->findModel($id);        return $this->ajaxCrud($model)->deleteAction();    }    public function findModel($id)    {        if (($model = SourceMessage::findOne($id)) !== null) {            return $model;        } else {            throw new NotFoundHttpException('The requested page does not exist.');        }    }    public function actionConvert()    {        $models = SourceMessage::find()->all();        foreach ($models as $model) {            $kr = Message::findOne(['id' => $model->id, 'language' => 'kr']);            if ($kr == null) {                $kr = new Message(['id' => $model->id, 'language' => 'kr']);            }            if ($kr->translation == '') {                $uz = Message::findOne(['id' => $model->id, 'language' => 'uz']);                if ($uz != null) {                    $kr->translation = LatinCyrillConvertor::latinToCyrill($uz->translation);                    $kr->save();                }            }        }    }    public function actionFillColumns()    {        /* $messages = Message::find()->all();         foreach ($messages as $message){             $message->created_at = time();             $message->save();         }         */        /*  $sourcemessages = SourceMessage::find()->all();          foreach ($sourcemessages as $sourcemessage){              $sourcemessage->created_at = time();              $sourcemessage->save();          }*/    }    public function actionSync()    {        Sync::export();    }}