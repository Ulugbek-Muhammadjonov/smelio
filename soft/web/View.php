<?phpnamespace soft\web;use soft\helpers\ArrayHelper;use Yii;use soft\widget\ajaxcrud\CrudAsset;use yii\caching\Dependency;use yii\helpers\Html;use yii\web\View as YiiView;/** * * @property-read mixed $route * @property-read bool $isAjax * @property-read mixed $request * @property-read mixed $csrfInput */class View extends YiiView{    use VCTrait;    /**     * @var string Header title for view page. This text appear in layout (before content)     */    public $headerText;    public $metaTitle;    public $metaDescription;    public $metaKeywords;    public $metaImage;    private $_isCrudModalRendered = false;    public function modalBegin($options)    {        if (isBs4()) {            \yii\bootstrap4\Modal::begin($options);        } else {            \yii\bootstrap\Modal::begin($options);        }    }    /**     * @throws \Exception     */    public function modalEnd()    {        if (isBs4()) {            \yii\bootstrap4\Modal::end();        } else {            \yii\bootstrap\Modal::end();        }    }    public function renderModal($options = [])    {        $this->modalBegin($options);        $this->modalEnd();    }    public function renderCrudModal($options = [])    {        if (!$this->_isCrudModalRendered) {            $options = array_merge([                "id" => "ajaxCrudModal",                'options' => [                    'class' => 'modal fade',                    'data-keyboard' => "false",                    'data-backdrop' => "static",                    'tabindex' => false,                ],                "footer" => '',            ], $options);            $this->renderModal($options);            $this->_isCrudModalRendered = true;        }    }    public function registerCrudAsset()    {        CrudAsset::register($this);    }    public function registerAjaxCrudAssets($modalOptions = [])    {        $this->renderCrudModal($modalOptions);        $this->registerCrudAsset();    }    public function getRoute()    {        return Yii::$app->controller->route;    }    public function getCsrfInput()    {        $csrfParam = $this->request->csrfParam;        $csrfToken = $this->request->csrfToken;        return Html::hiddenInput($csrfParam, $csrfToken);    }    /**     * View faylda breadcrumb uchun item qo'shish     * @param string $label     * @param null|string|array $url     */    public function addBreadCrumb($label, $url = null)    {        $this->params['breadcrumbs'][] = ['label' => $label, 'url' => $url];    }    # <editor-fold desc="Request" defaultstate="collapsed">    public function getRequest()    {        return Yii::$app->request;    }    /**     * @return bool     */    public function getIsAjax()    {        return $this->request->isAjax;    }    /**     * @param null $name     * @param null $defaultValue     * @return array|mixed     */    public function post($name = null, $defaultValue = null)    {        return $this->request->post($name, $defaultValue);    }    # </editor-fold>    /**     * @param string $view     * @param array $params     * @param string $cacheId a unique ID identifying the fragment to be cached.     * @param array $properties initial property values for [[FragmentCache]]     * @return mixed|string     */    public function renderFromCache(string $view, array $params = [], string $cacheId = null, array $properties = [])    {//        if (YII_DEBUG) {//            return $this->render($view, $params);//        }        if ($cacheId == null) {            $cacheId = '_view_' . $view . '_' . Yii::$app->language;        }        if ($this->beginCache($cacheId, $properties)) {            echo $this->render($view, $params);            $this->endCache();        }    }}