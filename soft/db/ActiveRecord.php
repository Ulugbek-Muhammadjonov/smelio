<?phpnamespace soft\db;use common\models\User;use soft\helpers\StringHelper;use Yii;use soft\helpers\ArrayHelper;use yii\base\ModelEvent;use yii\db\ActiveRecord as YiiActiveRecord;use yii\db\StaleObjectException;use yii\helpers\Inflector;/** * @method ActiveQuery hasMany($class, array $link) see [[BaseActiveRecord::hasMany()]] for more info * @method ActiveQuery hasOne($class, array $link) see [[BaseActiveRecord::hasOne()]] for more info * * @property-read string $firstErrorMessage The first error message * * @property-read mixed $statusLabel [[self::getStatusName()]] * @property-read string $statusType * * @property-read \soft\i18n\Formatter|\yii\i18n\Formatter $formatter * @property-read bool $isDeletable * @property-read bool $isUpdatable * @property-read mixed $statusAttributeValue * @property-read string $statusBadge * @property-read bool $isNew * @property-read bool $isWaiting * @property-read bool $isCanceled * @property-read bool $isAllowed */class ActiveRecord extends YiiActiveRecord implements ActiveRecordStatusInterface{    use ActiveRecordTrait;    use ActiveRecordStatusTrait;    use ActiveRecordMultilingualTrait;    const SCENARIO_NO_TRANSACTION = '_noTransaction';    /**     * @var array     */    public static $fields = [];    private $_crudErrors = [];    //<editor-fold desc="Methods" defaultstate="collapsed">    public function scenarios()    {        $scenarios = parent::scenarios();        $scenarios[self::SCENARIO_NO_TRANSACTION] = [];        return $scenarios;    }    /**     * @return array     */    public function fields()    {        $key = self::generateFieldParam();        if (isset(self::$fields[$key])) {            return self::$fields[$key];        }        $fields = parent::fields();        if ($this->hasMultilingualAttributes) {            $fields = ArrayHelper::merge($fields, array_combine($this->multilingualAttributes, $this->multilingualAttributes));        }        return $fields;    }    /**     * Freshly saves model attributes without any behavior applying.     * @param bool $runValidation Default: `false`     * @param bool $noTransaction Default: `true`     * @param array $attributeNames     * @return bool     * @see detachBehaviors     */    public function freshSave($runValidation = false, $noTransaction = true, $attributeNames = null)    {        if ($noTransaction) {            $this->scenario = self::SCENARIO_NO_TRANSACTION;        }        $this->detachBehaviors();        return $this->save($runValidation, $attributeNames);    }    //</editor-fold>    //<editor-fold desc="Attribute labels" defaultstate="collapsed">    /**     * Attribute labels     * @return array     */    public function labels()    {        return [];    }    public function defaultAttributeLabels()    {        return [            'id' => 'ИД',            'name' => 'Номи',            'title' => 'Сарлавҳа',            'text' => "Матн",            'description' => "Тавсиф",            'content' => "Контент",            'image' => "Расм",            'phone' => 'Тел. рақам',            'date' => 'Сана',            'address' => 'Манзил',            'status' => "Ҳолат",            'statusBadge' => "Ҳолат",            'user_id' => "Муаллиф",            'comment' => 'Изоҳ',            'dollar_value' => 'Доллар курси',            'created_at' => "Яратилди",            'updated_at' => "Таҳрирланди",            'confirmed_at' => "Тасдиқланган вақти",            'created_by' => "Ким томонидан яратилди",            'createdBy.fullname' => "Ким томонидан яратилди",            'updated_by' => "Ким томонидан таҳрирланди",            'updatedBy.fullname' => "Ким томонидан таҳрирланди",            'confirmed_by' => "Ким тасдиқлади",            'confirmedBy.fullname' => "Ким тасдиқлади",        ];    }    /**     * @inheritDoc     */    public function attributeLabels()    {        $defaultLabels = $this->defaultAttributeLabels();        $labels = $this->labels();        return array_merge($defaultLabels, $labels);    }    /**     * @param string $attribute     * @return string     */    public function getAttributeLabel($attribute)    {        if ($this->hasMultilingualBehavior) {            if ($this->multilingualBehavior->isAttributeMultilingual($attribute)) {                return $this->multilingualBehavior->getMultilingualAttributeLabel($attribute);            }        }        return parent::getAttributeLabel($attribute);    }    //</editor-fold>    //<editor-fold desc="For CRUD actions" defaultstate="collapsed">    /**     * @return string the first error text of the model after validating     * */    public function getFirstErrorMessage()    {        $firstErrors = $this->firstErrors;        if (empty($firstErrors)) {            return null;        }        $array = array_values($firstErrors);        return ArrayHelper::getArrayValue($array, 0, null);    }    /**     * @param $formName string|null     * @return bool     */    public function loadPost($formName = null)    {        return $this->load(Yii::$app->request->post(), $formName);    }    /**     * @return bool     */    public function loadSave()    {        return $this->load(Yii::$app->request->post()) && $this->save();    }    /**     * @return bool     */    public function loadValidate()    {        return $this->load(Yii::$app->request->post()) && $this->validate();    }    //</editor-fold>    //<editor-fold desc="Formatter" defaultstate="collapsed">    /**     * @return \soft\i18n\Formatter|\yii\i18n\Formatter     */    public function getFormatter()    {        return Yii::$app->formatter;    }    //</editor-fold>    //<editor-fold desc="CRUD Actions and Errors" defaultstate="collapsed">    /**     * Adds action error message     * @param $type string action type, forinstance, 'delete', 'update'     * @param $message string Error message     * @see getCrudError     * @see getIsDeletable     * @see getIsUpdatable     */    public function addCrudError($type, $message)    {        $errors = $this->_crudErrors;        $errors[$type] = $message;        $this->_crudErrors = $errors;    }    /**     * Gets action error message     * @param $type string action type, forinstance, 'delete', 'update'     * @param $default string Error message     * @see addCrudError     * @see getIsDeletable     * @see getIsUpdatable     */    public function getCrudError($type, $default = null)    {        if ($default === null) {            $default = 'Сизга бу амални бажаришга рухсат берилмаган';        }        return ArrayHelper::getArrayValue($this->_crudErrors, $type, $default);    }    /**     * Deleting conditions.     * You may override this method in child classes     *     *  ```php     * public function getIsDeletable()     * {     *     if (!$model->user_id != Yii::$app->user->id ) {     *         $model->addCrudError('delete', 'You are not allowed to delete this record!')     *         return false;     *     }     *     *     return true;     * }     * ```     * Then you can check delete conditions before deleting the record,     * forexample, on controller:     *     * ```php     * public function actionDelete($id)     * {     *     *     $model = $this->findModel($id);     *     if(!$model->getIsDeletable()){     *          throw new ForbiddenHttpException($model->getCrudError('delete', 'Some default message'));     *      }     *     $model->delete();     *     return ...;     * }     * ```     *     * @return bool whether the record should be deleted. Defaults to `true`.     */    public function getIsDeletable()    {        return true;    }    /**     * Updating conditions.     * You may override this method in child classes     *     *  ```php     * public function getIsUpdatable()     * {     *     if (!$model->user_id != Yii::$app->user->id ) {     *         $model->addCrudError('update', 'You are not allowed to update this record!')     *         return false;     *     }     *     *     return true;     * }     * ```     * Then you can check delete conditions before deleting the record,     * forexample, on controller:     *     * ```php     * public function actionUpdate($id)     * {     *     *     $model = $this->findModel($id);     *     *     if(!$model->getIsUpdatable()){     *          throw new ForbiddenHttpException($model->getCrudError('update', 'Some default message'));     *      }     *     *     ...     * }     * ```     *     * @return bool whether the record should be updated. Defaults to `true`.     */    public function getIsUpdatable()    {        return true;    }    //</editor-fold>    //<editor-fold desc="Transactional After save and after delete" defaultstate="collapsed">    /**     * If insert is transactional, transaction will be commited after save     * {@inheritdoc}     * @see afterSave()     */    protected function insertInternal($attributes = null)    {        if (!$this->beforeSave(true)) {            return false;        }        $values = $this->getDirtyAttributes($attributes);        if (($primaryKeys = static::getDb()->schema->insert(static::tableName(), $values)) === false) {            return false;        }        foreach ($primaryKeys as $name => $value) {            $id = static::getTableSchema()->columns[$name]->phpTypecast($value);            $this->setAttribute($name, $id);            $values[$name] = $id;        }        $changedAttributes = array_fill_keys(array_keys($values), null);        $this->setOldAttributes($values);        //changed code here        return $this->afterSave(true, $changedAttributes);    }    /**     * If updating is transactional, transaction will be commited after save     * {@inheritdoc}     * @see afterSave()     */    protected function updateInternal($attributes = null)    {        if (!$this->beforeSave(false)) {            return false;        }        $values = $this->getDirtyAttributes($attributes);        if (empty($values)) {            $this->afterSave(false, $values);            return 0;        }        $condition = $this->getOldPrimaryKey(true);        $lock = $this->optimisticLock();        if ($lock !== null) {            $values[$lock] = $this->$lock + 1;            $condition[$lock] = $this->$lock;        }        // We do not check the return value of updateAll() because it's possible        // that the UPDATE statement doesn't change anything and thus returns 0.        $rows = static::updateAll($values, $condition);        if ($lock !== null && !$rows) {            throw new StaleObjectException('The object being updated is outdated.');        }        if (isset($values[$lock])) {            $this->$lock = $values[$lock];        }        $changedAttributes = [];        //changed code here        $oldAttributes = $this->getOldAttributes();        foreach ($values as $name => $value) {            $changedAttributes[$name] = $oldAttributes[$name] ?? null;            $this->setOldAttribute($name, $value);        }        if ($this->afterSave(false, $changedAttributes) === false) {            return false;        }        //  end of changed code        return $rows;    }    /**     * {@inheritdoc}     * DB Transaction is possible if insert or update is transactional     * @return bool     */    public function afterSave($insert, $changedAttributes)    {        $event = new AfterSaveEvent([            'changedAttributes' => $changedAttributes,        ]);        $this->trigger($insert ? self::EVENT_AFTER_INSERT : self::EVENT_AFTER_UPDATE, $event);        return $event->isValid;    }    /**     * If deleting is transactional, transaction will be commited after delete     * {@inheritdoc}     * @see afterDelete()     */    protected function deleteInternal()    {        if (!$this->beforeDelete()) {            return false;        }        // we do not check the return value of deleteAll() because it's possible        // the record is already deleted in the database and thus the method will return 0        $condition = $this->getOldPrimaryKey(true);        $lock = $this->optimisticLock();        if ($lock !== null) {            $condition[$lock] = $this->$lock;        }        $result = static::deleteAll($condition);        if ($lock !== null && !$result) {            throw new StaleObjectException('The object being deleted is outdated.');        }        $this->setOldAttributes(null);        //changed code here        if (!$this->afterDelete()) {            return false;        }        //end of changed code        return $result;    }    /**     * {@inheritdoc}     * DB Transaction is possible if delete is transactional     * @return bool     */    public function afterDelete()    {        $event = new ModelEvent();        $this->trigger(self::EVENT_AFTER_DELETE, $event);        return $event->isValid;    }    //</editor-fold>    /**     * @param array $fields     */    public static function setFields(array $fields)    {        $key = self::generateFieldParam();        self::$fields[$key] = $fields;    }    /**     * @return string     */    public static function generateFieldParam()    {        $key = Inflector::camel2id(StringHelper::basename(get_called_class()), '_');        return $key.'_fields';    }    /**     * @return array     */    public static function givenFields()    {        $key = self::generateFieldParam();        return self::$fields[$key] ?? [];    }    /**     * @return bool     */    public static function hasGivenFields()    {        return !empty(self::givenFields());    }}