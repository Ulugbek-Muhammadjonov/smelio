<?phpnamespace soft\widget\dynamicform;use soft\db\ActiveRecord;use soft\helpers\ArrayHelper;use Yii;use yii\base\InvalidConfigException;use yii\base\Model;/** * Model to save data from DynamicFormWidget * * @property mixed $oldIds * @property-read bool $hasModel */class DynamicFormModel extends Model{    /**     * @var ActiveRecord parent models     */    public $model;    /**     * @var ActiveRecord[] child models     */    public $models;    /**     * @var string|null child models scenario     */    public $modelsScenario;    /**     * @var array attributes and values  for parent model     * @see self::setAttributeValues()     */    public $modelAttributes = [];    /**     * @var array attributes and values  for child models     * @see setAttributeValues     */    public $modelsAttributes = [];    /**     * @var string child models classname     */    public $modelClass;    /**     * @var bool|string sort attribute name for child models     * @see setSort     */    public $sortAttribute = false;    /**     * @var bool     * @see deleteOldIds     */    public $deleteOldModels = false;    /**     * @var string     */    public $parentAttribute = 'id';    /**     * @var string|null     */    public $childDependantAttribute;    /**     * @var string     */    public $successMessage;    /**     * @var string     */    public $errorMessage = "Ma'lumotlarni saqlashda xatolik yuz berdi!";    private $_oldIds = [];    /**     * @inheritDoc     * @throws \yii\base\InvalidConfigException     */    public function init()    {        parent::init();        if (empty($this->modelClass)) {            throw new InvalidConfigException("The 'modelClass' property must be set!");        }        if (empty($this->models)) {            $this->models = [new $this->modelClass];        }    }    /**     * Ma'lumotlarni load qilish va saqlash     * @param null $data     * @return bool     * @throws \yii\db\Exception     * @throws \Exception     */    public function loadSave($data = null)    {        return $this->loadData($data) && $this->save();    }    /**     * Parent modelga ma'lumotlarni load qilish     * @param null|array $data     * @return bool     * @throws \Exception     * @see Model::load()     */    public function loadData($data = null)    {        if ($data == null) {            $data = Yii::$app->request->post();        }        if (empty($data)) {            return false;        }        if ($this->hasModel) {            $this->model->load($data);        }        if ($this->deleteOldModels) {            $this->oldIds = ArrayHelper::map($this->models, 'id', 'id');        }        $this->models = $this->createMultiple($data);        return Model::loadMultiple($this->models, $data);    }    /**     * Creates and populates a set of models.     * @param $data     * @return array     * @throws \Exception     */    public function createMultiple($data)    {        $model = new $this->modelClass;        $formName = $model->formName();        $items = ArrayHelper::getValue($data, $formName);        $models = [];        if (!empty($this->models)) {            $keys = array_keys(ArrayHelper::map($this->models, 'id', 'id'));            $this->models = array_combine($keys, $this->models);        }        if ($items && is_array($items)) {            foreach ($items as $i => $item) {                if (isset($item['id']) && !empty($item['id']) && isset($this->models[$item['id']])) {                    $models[] = $this->models[$item['id']];                } else {                    $models[] = new $this->modelClass;                }            }        }        unset($model, $formName, $items);        return $models;    }    /**     * Save parent model and child models     * @return bool     * @throws \yii\db\Exception     */    public function save()    {        $this->setSort();        $this->setAttributeValues();        $transaction = Yii::$app->db->beginTransaction();        $this->deleteOldIds();        $result = $this->saveModel();        $result = $result && $this->saveModels();        if ($result) {            $transaction->commit();        } else {            $transaction->rollBack();        }        if ($result && $this->successMessage) {            Yii::$app->session->setFlash('success', $this->successMessage);        }        if (!$result && $this->errorMessage) {            Yii::$app->session->setFlash('error', $this->errorMessage);        }        return $result;    }    /**     * Set sorting values for child models     * @see sortAttribute     */    public function setSort()    {        if ($this->sortAttribute !== false) {            $sortAttribute = $this->sortAttribute;            foreach ($this->models as $index => $model) {                $model->$sortAttribute = $index;            }        }    }    /**     * Set attribute values for parent model and child models     * @see self::$modelAttributes     * @see self::$modelsAttributes     */    public function setAttributeValues()    {        // set parent model attributes        if ($this->hasModel) {            $this->model->setAttributes($this->modelAttributes, false);        }        // set child multiple models attributes        foreach ($this->models as $key => $model) {            if ($this->modelsScenario) {                $this->models[$key]['scenario'] = $this->modelsScenario;            }            $this->models[$key]->setAttributes($this->modelsAttributes, false);        }    }    /**     * Delete old models     * @see self::$deleteOldModels     */    public function deleteOldIds()    {        $oldIDs = $this->oldIds;        if ($this->deleteOldModels) {            $deletedIDs = array_diff($oldIDs, array_filter(ArrayHelper::map($this->models, 'id', 'id')));            if (!empty($deletedIDs)) {                foreach ($deletedIDs as $id) {                    /** @var \yii\db\BaseActiveRecord $model */                    $model = $this->modelClass::findOne($id);                    if ($model != null) {                        $model->delete();                    }                }            }        }    }    /**     * Validate and save parent model     * @return bool     * @see save     * @see getHasModel     */    public function saveModel()    {        if ($this->hasModel) {            return $this->model->save();        }        return true;    }    /**     * Validate and save all child models     * @warning this method must be called after saveModel     * @return bool     * @see saveModel     * @see save     */    public function saveModels()    {        $childDependantAttribute = $this->childDependantAttribute;        $hasModel = $this->hasModel;        foreach ($this->models as $key => $model) {            if ($hasModel && $childDependantAttribute) {                $this->models[$key]->{$childDependantAttribute} = $this->model->{$this->parentAttribute};            }            if (!$this->models[$key]->save()) {                return false;            }        }        return true;    }    /**     * Validate all child models     * @return bool     */    protected function validateModels()    {        $valid = true;        foreach ($this->models as $key => $model) {            if (!$this->models[$key]->validate()) {                $valid = false;            }        }        return $valid;    }    /**     * Check if the widget has single parent model     * @return bool     */    public function getHasModel()    {        return $this->model != null;    }    /**     * @return mixed     */    public function getOldIds()    {        return $this->_oldIds;    }    /**     * @param mixed $oldIds     */    public function setOldIds($oldIds)    {        $this->_oldIds = $oldIds;    }}?>